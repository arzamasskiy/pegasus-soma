	
#	This file is part of the Snoopy code.
#
#    Snoopy code is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.

#    Snoopy code is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.

#    You should have received a copy of the GNU General Public License
#    along with the Snoopy code.  If not, see <http://www.gnu.org/licenses/>.



# Example of a Snoopy configuration file

configname = "Sheared convection+walls problem";

// Only the variable which are different from default are set.

physics:									// Physics parameters
{
	boxsize = (2.0, 4.0, 2.0);				// Box length in X, Y and Z
	
	reynolds = 15000.0;							// Reynolds number (actully the inverse of the viscosity)
	reynolds_thermic = 15000.0;				// Magnetic Reynolds number (actully the inverse of the resistivity).  Used only when MHD is on
	
	omega = 0.6666666666666666666;			// Vertical rotation rate (if Shear=1, Keplerian if found for 2.0/3.0). Used only when WITH_ROTATION is on
	brunt_vaissala_squared = -0.1;			// Brunt Vaissala frequency squared. Used only when Boussinesq is on
	shear = 1.0;							// Shear rate. Used only when WITH_SHEAR is on.
};

//-------------------------------------------------------------------------------------------------------------------------

code:										// code parameters
{		
	t_initial = 0.0;						// Initial time of the simulation
	t_final = 400.0;							// Simulation will stop if it reaches this time
	max_t_elapsed = 1e30;					// Maximum elapsed time (in hours). Will stop after this elapsed time if t_final is not reached.
	
	interface_check = 5;					// Number of loops between two checks for a user input. On slow filesystems, increase this number 
	interface_output_file = false;			// Set to true to force interface outputs to a file instead of displaying them */

	force_symmetries = true;				// Uncomment to enforce spectral symmetries and mean flow to zero. Useful when N^2 or kappa^2 < 0. (see enforce_symm() )
	symmetries_step = 20;					// Number of loops between which the symmetries are enforced. Should be around ~20 for Boussinesq convection.
	
	restart = false;						// set to true to restart from a dump file. If no dump file is found, this option has no effect.
};

//-------------------------------------------------------------------------------------------------------------------------

output:										// output parameters
{
	timevar_step = 0.1;						// Time between two outputs in the timevar file
	snapshot_step = 0.1;					// Time between two snapshot outputs
	dump_step = 1.0;						// Time between two restart dump outputs (restart dump are erased)
};

//-------------------------------------------------------------------------------------------------------------------------

init:										// Initial conditions parameters
{
	vortex:						// Init a large scale random noise down to cut_length */
	{
		enable=true;
		a=0.5;		
		b = 1.0;				
	};
};
		
